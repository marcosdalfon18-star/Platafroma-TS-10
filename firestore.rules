rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Reglas para usuarios
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reglas para empresas
    match /companies/{companyId} {
      allow read, write: if request.auth != null && (
        // El owner puede hacer todo
        resource.data.ownerId == request.auth.uid ||
        // Los empleados pueden leer la información de su empresa
        isEmployeeOfCompany(request.auth.uid, companyId)
      );
      allow create: if request.auth != null;
    }
    
    // Reglas para empleados
    match /employees/{employeeId} {
      allow read: if request.auth != null && (
        // El empleado puede ver su propia información
        resource.data.userId == request.auth.uid ||
        // Los administradores de la empresa pueden ver empleados
        isCompanyAdmin(request.auth.uid, resource.data.companyId)
      );
      allow write: if request.auth != null && 
        isCompanyAdmin(request.auth.uid, resource.data.companyId);
      allow create: if request.auth != null && 
        isCompanyAdmin(request.auth.uid, request.resource.data.companyId);
    }
    
    // Reglas para puestos de trabajo
    match /jobPositions/{positionId} {
      allow read: if request.auth != null && (
        isCompanyMember(request.auth.uid, resource.data.companyId)
      );
      allow write, create: if request.auth != null && 
        isCompanyAdmin(request.auth.uid, resource.data.companyId);
      allow delete: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        isCompanyAdmin(request.auth.uid, resource.data.companyId)
      );
    }
    
    // Reglas para procesos de selección
    match /selectionProcesses/{processId} {
      allow read, write: if request.auth != null && 
        isCompanyAdmin(request.auth.uid, resource.data.companyId);
      allow create: if request.auth != null && 
        isCompanyAdmin(request.auth.uid, request.resource.data.companyId);
    }
    
    // Reglas para nóminas
    match /payrolls/{payrollId} {
      allow read: if request.auth != null && (
        // El empleado puede ver su propia nómina
        resource.data.employeeId == getEmployeeId(request.auth.uid) ||
        // Los administradores pueden ver todas las nóminas de su empresa
        isCompanyAdmin(request.auth.uid, resource.data.companyId)
      );
      allow write, create: if request.auth != null && 
        isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
    
    // Reglas para asistencias
    match /attendances/{attendanceId} {
      allow read: if request.auth != null && (
        // El empleado puede ver su propia asistencia
        resource.data.employeeId == getEmployeeId(request.auth.uid) ||
        // Los administradores pueden ver todas las asistencias de su empresa
        isCompanyAdmin(request.auth.uid, resource.data.companyId)
      );
      allow write: if request.auth != null && (
        // El empleado puede marcar su propia asistencia
        resource.data.employeeId == getEmployeeId(request.auth.uid) ||
        // Los administradores pueden modificar cualquier asistencia
        isCompanyAdmin(request.auth.uid, resource.data.companyId)
      );
      allow create: if request.auth != null;
    }
    
    // Reglas para documentos
    match /documents/{documentId} {
      allow read: if request.auth != null && (
        // El empleado puede ver sus propios documentos
        resource.data.employeeId == getEmployeeId(request.auth.uid) ||
        // Los administradores pueden ver documentos de su empresa
        isCompanyAdmin(request.auth.uid, resource.data.companyId) ||
        // El usuario que subió el documento puede verlo
        resource.data.uploadedBy == request.auth.uid
      );
      allow write, create: if request.auth != null;
      allow delete: if request.auth != null && (
        resource.data.uploadedBy == request.auth.uid ||
        isCompanyAdmin(request.auth.uid, resource.data.companyId)
      );
    }
    
    // Funciones auxiliares
    function isCompanyAdmin(userId, companyId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)) &&
        get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == userId;
    }
    
    function isEmployeeOfCompany(userId, companyId) {
      return exists(/databases/$(database)/documents/employees/$(userId)) &&
        get(/databases/$(database)/documents/employees/$(userId)).data.companyId == companyId &&
        get(/databases/$(database)/documents/employees/$(userId)).data.status == 'activo';
    }
    
    function isCompanyMember(userId, companyId) {
      return isCompanyAdmin(userId, companyId) || isEmployeeOfCompany(userId, companyId);
    }
    
    function getEmployeeId(userId) {
      // Esta función debería buscar el employeeId basado en el userId
      // Por simplicidad, asumimos que son iguales o que se maneja en el cliente
      return userId;
    }
  }
}