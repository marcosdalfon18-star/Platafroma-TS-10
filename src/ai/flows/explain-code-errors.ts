'use server';

/**
 * @fileOverview Explains code errors in simple terms and provides possible solutions.
 *
 * - explainCodeErrors - A function that takes code and error messages as input, and returns explanations and suggested fixes.
 * - ExplainCodeErrorsInput - The input type for the explainCodeErrors function.
 * - ExplainCodeErrorsOutput - The return type for the explainCodeErrors function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExplainCodeErrorsInputSchema = z.object({
  code: z.string().describe('The code to analyze.'),
  errors: z.string().describe('The error messages generated by the linter.'),
});
export type ExplainCodeErrorsInput = z.infer<typeof ExplainCodeErrorsInputSchema>;

const ExplainCodeErrorsOutputSchema = z.object({
  explanation: z.string().describe('Explanation of the errors in simple terms.'),
  suggestions: z.array(z.string()).describe('Suggested fixes for the errors.'),
});
export type ExplainCodeErrorsOutput = z.infer<typeof ExplainCodeErrorsOutputSchema>;

export async function explainCodeErrors(input: ExplainCodeErrorsInput): Promise<ExplainCodeErrorsOutput> {
  return explainCodeErrorsFlow(input);
}

const explainCodeErrorsPrompt = ai.definePrompt({
  name: 'explainCodeErrorsPrompt',
  input: {schema: ExplainCodeErrorsInputSchema},
  output: {schema: ExplainCodeErrorsOutputSchema},
  prompt: `You are a helpful assistant that explains code errors in simple terms and provides possible solutions.
  Given the following code and error messages, explain the errors and suggest fixes.

  Code:
  {{code}}

  Errors:
  {{errors}}

  Explanation:
  Suggestions:`, // Ensure output is structured as Explanation and Suggestions.
});

const explainCodeErrorsFlow = ai.defineFlow(
  {
    name: 'explainCodeErrorsFlow',
    inputSchema: ExplainCodeErrorsInputSchema,
    outputSchema: ExplainCodeErrorsOutputSchema,
  },
  async input => {
    const {output} = await explainCodeErrorsPrompt(input);
    return output!;
  }
);
