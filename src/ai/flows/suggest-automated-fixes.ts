'use server';

/**
 * @fileOverview AI flow for suggesting automated fixes for common code errors.
 *
 * - suggestAutomatedFixes - A function that suggests automated fixes for code errors.
 * - SuggestAutomatedFixesInput - The input type for the suggestAutomatedFixes function.
 * - SuggestAutomatedFixesOutput - The return type for the suggestAutomatedFixes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestAutomatedFixesInputSchema = z.object({
  code: z
    .string()
    .describe('The code to analyze and suggest automated fixes for.'),
  errors: z
    .string()
    .describe(
      'The error messages generated by a linter for the given code.'
    ),
});
export type SuggestAutomatedFixesInput = z.infer<
  typeof SuggestAutomatedFixesInputSchema
>;

const SuggestAutomatedFixesOutputSchema = z.object({
  fixedCode: z
    .string()
    .describe('The code with automated fixes applied, if any.'),
  explanation: z
    .string()
    .describe('An explanation of the fixes applied to the code.'),
});
export type SuggestAutomatedFixesOutput = z.infer<
  typeof SuggestAutomatedFixesOutputSchema
>;

export async function suggestAutomatedFixes(
  input: SuggestAutomatedFixesInput
): Promise<SuggestAutomatedFixesOutput> {
  return suggestAutomatedFixesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestAutomatedFixesPrompt',
  input: {schema: SuggestAutomatedFixesInputSchema},
  output: {schema: SuggestAutomatedFixesOutputSchema},
  prompt: `You are an AI code assistant that suggests automated fixes for common code errors.

You are given a piece of code and a list of errors generated by a linter.

Based on the errors, you will suggest automated fixes for the code and provide an explanation of the fixes applied.

If no fixes are applicable, return the original code.

Code:
\`\`\`
{{code}}
\`\`\`

Errors:
\`\`\`
{{errors}}
\`\`\`

Fixed Code:
\`\`\`
{{fixedCode}}
\`\`\`

Explanation:
{{explanation}}
`,
});

const suggestAutomatedFixesFlow = ai.defineFlow(
  {
    name: 'suggestAutomatedFixesFlow',
    inputSchema: SuggestAutomatedFixesInputSchema,
    outputSchema: SuggestAutomatedFixesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
